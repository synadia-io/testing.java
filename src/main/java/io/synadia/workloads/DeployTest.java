/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.synadia.workloads;

import io.nats.client.*;
import io.nats.client.api.ServerInfo;
import io.nats.client.api.StorageType;
import io.nats.client.api.StreamConfiguration;
import io.nats.client.api.StreamInfo;
import io.synadia.CommandLine;
import io.synadia.tools.DebugListener;

public class DeployTest extends Workload {
    public DeployTest(CommandLine commandLine) {
        super(commandLine);
    }

    @Override
    protected void subRunWorkload() throws Exception {
        System.out.println("Deploy Test");
        System.out.println("CLIENT_VERSION: " + Nats.CLIENT_VERSION);
        connect(params.jv.map.get("server0").string);
        connect(params.jv.map.get("server1").string);
        connect(params.jv.map.get("server2").string);
    }

    private static void connect(String ip) {
        String server ="nats://" + ip + ":4222";
        System.out.println();
        System.out.println("connecting to: " + server);
        DebugListener l = new DebugListener();
        Options options = new Options.Builder()
            .server(server)
            .connectionListener((x, y) -> {})
            .errorListener(new ErrorListener() {})
            .build();
        try (Connection nc = Nats.connect(options)) {
            System.out.println("server: " + getServerInfo(nc));
            String stream = NUID.nextGlobalSequence();
            String subject = NUID.nextGlobalSequence();
            JetStreamManagement jsm = nc.jetStreamManagement();
            jsm.addStream(StreamConfiguration.builder()
                .name(stream)
                .subjects(subject)
                .storageType(StorageType.Memory)
                .build());
            StreamInfo si = jsm.getStreamInfo(stream);
            boolean test = stream.equals(si.getConfig().getName());
            System.out.println("stream create: " + (test ? "succeeded" : "failed"));
            jsm.deleteStream(stream);
        }
        catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }

    private static String getServerInfo(Connection nc) {
        ServerInfo si = nc.getServerInfo();
        return "    serverId: " + si.getServerId()
            + "\n    serverName: " + si.getServerName()
            + "\n    version: " + si.getVersion()
            + "\n    connectURLs=" + si.getConnectURLs()
            + "\n    clientIp: " + si.getClientIp()
            + "\n    cluster: " + si.getCluster();
    }
}
