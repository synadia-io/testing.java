/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.synadia.workloads;

import io.nats.client.Connection;
import io.nats.client.KeyValue;
import io.nats.client.Nats;
import io.nats.client.Options;
import io.nats.client.api.KeyValueEntry;
import io.nats.client.api.KeyValueWatcher;
import io.nats.client.support.JsonParser;
import io.nats.client.support.JsonValue;
import io.nats.jsmulti.shared.Stats;
import io.synadia.CommandLine;
import io.synadia.Workload;
import io.synadia.tools.Debug;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.ReentrantLock;

public class WatchTracking extends Workload implements KeyValueWatcher {
    public WatchTracking(CommandLine commandLine) {
        super("Watch Tracking", commandLine);
    }

    @Override
    public void runWorkload() throws Exception {
        Options options = getAdminOptions("Setup Tracking");
        try (Connection nc = Nats.connect(options)) {
            KeyValue kv = nc.keyValue(params.trackingBucket);
            kv.watchAll(this);
            while (true) {
                Thread.sleep(1000);
                report();
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }

    Map<String, List<Stats>> byType = new HashMap<>();
    Map<String, List<Stats>> byContext = new HashMap<>();
    ReentrantLock lock = new ReentrantLock();

    @Override
    public void watch(KeyValueEntry kve) {
        try {
            JsonValue jv = JsonParser.parse(kve.getValue());
            Boolean b = jv.map.get("final").bool;
            boolean fin = b != null && b;
            String[] key = kve.getKey().split("\\.");
            String statType = key[0];
            String ctx = key[1];
            Stats stats = new Stats(jv);

            lock.lock();
            try {
                byType.computeIfAbsent(statType, k -> new ArrayList<>()).add(stats);
                byContext.computeIfAbsent(ctx, k -> new ArrayList<>()).add(stats);
            }
            finally {
                lock.unlock();
            }

            Debug.info(workloadName, stats.label, stats.key, "Final? %s", fin);
        }
        catch (Exception e) {
            Debug.info(workloadName, "Exception", e);
        }
    }

    @Override
    public void endOfData() {
//        report();
//        System.exit(0);
    }

    private void report() {
        lock.lock();
        try {
            for (List<Stats> list : byType.values()) {
                Stats.report(list, true);
            }
        }
        finally {
            lock.unlock();
        }
    }
}
