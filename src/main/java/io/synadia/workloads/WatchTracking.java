/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.synadia.workloads;

import io.nats.client.Connection;
import io.nats.client.KeyValue;
import io.nats.client.Nats;
import io.nats.client.Options;
import io.nats.client.api.KeyValueEntry;
import io.nats.client.api.KeyValueWatcher;
import io.nats.client.support.JsonParseException;
import io.nats.client.support.JsonParser;
import io.nats.client.support.JsonValue;
import io.nats.jsmulti.shared.ProfileStats;
import io.nats.jsmulti.shared.Stats;
import io.synadia.CommandLine;
import io.synadia.Workload;
import io.synadia.tools.Debug;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.ReentrantLock;

import static io.synadia.tools.Constants.FINAL;

public class WatchTracking extends Workload {
    public enum Which {
        Stats("Stats"),
        RunStats("Run Stats");

        final String workloadName;

        Which(String workloadName) {
            this.workloadName = workloadName;
        }
    }

    private final Which which;
    private final String bucket;

    public WatchTracking(Which which, CommandLine commandLine) {
        super(which.workloadName, commandLine);
        this.which = which;
        if (which == Which.Stats) {
            bucket = params.statsBucket;
        }
        else {
            bucket = params.runStatsBucket;
        }
    }

    @Override
    public void runWorkload() throws Exception {
        Options options = getAdminOptions();
        try (Connection nc = Nats.connect(options)) {
            KeyValue kv = nc.keyValue(bucket);
            WtWatcher watcher;
            if (which == Which.Stats) {
                watcher = new StatsWatcher();
            }
            else {
                watcher = new RunStatsWatcher();
            }
            kv.watchAll(watcher);

            //noinspection InfiniteLoopStatement
            while (true) {
                //noinspection BusyWait
                Thread.sleep(params.watchWaitTime);
                watcher.report();
            }
        }
    }

    class StatsWatcher extends WtWatcher {
        Map<String, List<Stats>> byType = new HashMap<>();
        Map<String, List<Stats>> byContext = new HashMap<>();

        @Override
        void subWatch(ParsedEntry p) {
            Stats stats = new Stats(p.jv);

            if (!p.fin) {
                allFinal = false;
            }

            lock.lock();
            try {
                byType.computeIfAbsent(p.statType, k -> new ArrayList<>()).add(stats);
                byContext.computeIfAbsent(p.contextId, k -> new ArrayList<>()).add(stats);
            }
            finally {
                lock.unlock();
            }
//            Debug.info(workloadName, stats.action, stats.key, "Final? %s", p.fin);
        }

        @Override
        void subReport() {
            for (List<Stats> list : byType.values()) {
                Stats.report(list, true);
            }
        }
    }

    class RunStatsWatcher extends WtWatcher {
        Map<String, ProfileStats> byContext = new HashMap<>();

        @Override
        void subWatch(ParsedEntry p) {
            ProfileStats profileStats = new ProfileStats(p.jv);

            lock.lock();
            try {
                byContext.put(p.contextId, profileStats);
            }
            finally {
                lock.unlock();
            }
            Debug.info(workloadName, p.contextId, profileStats.getAction(), profileStats.getContextId());
        }

        @Override
        void subReport() {
            ProfileStats.report(new ArrayList<>(byContext.values()));
        }
    }

    static class ParsedEntry {
        final JsonValue jv;
        final boolean fin;
        final String statType;
        final String contextId;

        public ParsedEntry(KeyValueEntry kve) throws JsonParseException {
            jv = JsonParser.parse(kve.getValue());

            JsonValue jvFinal = jv.map.get(FINAL);
            if (jvFinal == null) {
                fin = false;
            }
            else {
                fin = jvFinal.bool != null && jvFinal.bool;
            }

            String[] key = kve.getKey().split("\\.");
            statType = key[0];
            contextId = key[1];
        }
    }

    abstract class WtWatcher implements KeyValueWatcher {
        ReentrantLock lock = new ReentrantLock();
        boolean allFinal = true;

        abstract void subWatch(ParsedEntry parsedEntry);

        @Override
        public void watch(KeyValueEntry kve) {
            try {
                subWatch(new ParsedEntry(kve));
            }
            catch (Exception e) {
                Debug.info(workloadName, e);
                Debug.stackTrace(workloadName, e);
                System.exit(-1);
            }
        }

        @Override
        public void endOfData() {
            if (allFinal) {
                report();
                System.exit(0);
            }
        }

        abstract void subReport();

        void report() {
            lock.lock();
            try {
                subReport();
            }
            finally {
                lock.unlock();
            }
        }
    }
}
