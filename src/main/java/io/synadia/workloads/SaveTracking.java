/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.synadia.workloads;

import io.nats.client.Connection;
import io.nats.client.KeyValue;
import io.nats.client.Nats;
import io.nats.client.Options;
import io.nats.client.api.KeyValueEntry;
import io.nats.client.api.KeyValueWatcher;
import io.nats.jsmulti.shared.ProfileStats;
import io.nats.jsmulti.shared.Stats;
import io.synadia.CommandLine;
import io.synadia.ParsedEntry;
import io.synadia.Workload;
import io.synadia.support.Debug;
import io.synadia.support.Reporting;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class SaveTracking extends Workload {
    public SaveTracking(CommandLine commandLine) {
        super("Save Tracking", commandLine);
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Override
    public void runWorkload() throws Exception {
        Options options = getAdminOptions();
        try (Connection nc = Nats.connect(options)) {
            KeyValue kv = nc.keyValue(params.statsBucket);
            SaveWatcher statsWatcher = new SaveWatcher();
            kv.watchAll(statsWatcher);
            statsWatcher.latch.await(10, TimeUnit.MINUTES);
            for (ParsedEntry p : statsWatcher.list) {
                p.targetAndLabel(new Stats(p.jv), false);
            }
            ParsedEntry.sort(statsWatcher.list);
            for (ParsedEntry p : statsWatcher.list) {
                Reporting.statsLineReport(p.label, (Stats)p.target);
            }

            kv = nc.keyValue(params.profileBucket);
            SaveWatcher profileWatcher = new SaveWatcher();
            kv.watchAll(profileWatcher);
            profileWatcher.latch.await(10, TimeUnit.MINUTES);
            for (ParsedEntry p : profileWatcher.list) {
                p.targetAndLabel(new ProfileStats(p.jv), true);
            }
            ParsedEntry.sort(profileWatcher.list);
            for (ParsedEntry p : profileWatcher.list) {
                Reporting.profileLineReport(p.label, (ProfileStats)p.target);
            }
        }
    }

    class SaveWatcher implements KeyValueWatcher {
        CountDownLatch latch = new CountDownLatch(1);
        List<ParsedEntry> list = new ArrayList<>();

        @Override
        public void watch(KeyValueEntry kve) {
            try {
                System.out.println(kve);
                list.add(new ParsedEntry(kve));
            }
            catch (Exception e) {
                Debug.info(label, e);
                Debug.stackTrace(label, e);
                System.exit(-1);
            }
        }

        @Override
        public void endOfData() {
            latch.countDown();
        }
    }
}
