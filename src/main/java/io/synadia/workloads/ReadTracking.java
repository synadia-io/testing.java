/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.synadia.workloads;

import io.nats.client.*;
import io.nats.client.api.KeyValueEntry;
import io.nats.client.api.KeyValueWatcher;
import io.synadia.CommandLine;
import io.synadia.Workload;
import io.synadia.utils.Debug;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class ReadTracking extends Workload {
    public ReadTracking(CommandLine commandLine) {
        super("Read Tracking", commandLine);
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Override
    public void runWorkload() throws Exception {
        Options adminOpts = getAdminOptions();
        try (Connection sourceNc = Nats.connect(adminOpts))
        {
            JetStream jsSource = sourceNc.jetStream();

            ReadWatcher sw = new ReadWatcher("Stats");
            ReadWatcher pw = new ReadWatcher("Profile");

            KeyValue kvSourceStats = sourceNc.keyValue(params.statsBucket);
            kvSourceStats.watchAll(sw);

            KeyValue kvSourceProfile = sourceNc.keyValue(params.profileBucket);
            kvSourceProfile.watchAll(pw);

            // 0. Wait
            sw.latch.await(10, TimeUnit.MINUTES);
            pw.latch.await(10, TimeUnit.MINUTES);

            JetStreamSubscription sub = jsSource.subscribe(
                params.profileStreamSubject,
                PushSubscribeOptions.builder().ordered(true).build());
            Thread.sleep(1000); // so I don't have to wait for messages
            Message m = sub.nextMessage(1000);
            while (m != null) {
                Debug.info("Profile Stream", m.getSubject());
                m = sub.nextMessage(1000);
            }
        }
    }

    static class ReadWatcher implements KeyValueWatcher {
        final CountDownLatch latch;
        final String label;

        public ReadWatcher(String label) {
            this.latch = new CountDownLatch(1);
            this.label = label;
        }

        @Override
        public void watch(KeyValueEntry kve) {
            try {
                Debug.info(label, kve.getKey());
            }
            catch (Exception e) {
                Debug.stackTrace(label, e);
                System.exit(-1);
            }
        }

        @Override
        public void endOfData() {
            latch.countDown();
        }
    }
}
